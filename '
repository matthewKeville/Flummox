package com.keville.ReBoggled.service.answerService;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.keville.ReBoggled.model.game.BoardWord;
import com.keville.ReBoggled.model.game.Game;
import com.keville.ReBoggled.model.game.GameAnswer;
import com.keville.ReBoggled.model.game.GameBoardWord;
import com.keville.ReBoggled.model.game.GameSeed;
import com.keville.ReBoggled.model.game.ScoreBoardEntry;
import com.keville.ReBoggled.model.game.UserGameBoardWord;
import com.keville.ReBoggled.model.user.User;
import com.keville.ReBoggled.service.answerService.AnswerServiceException.AnswerServiceError;
import com.keville.ReBoggled.service.solutionService.SolutionService;
import com.keville.ReBoggled.service.solutionService.SolutionServiceException;

@Component
public class DefaultAnswerService implements AnswerService {

  public static Logger LOG = LoggerFactory.getLogger(AnswerService.class);
  public SolutionService solutionService;
  public UserRepository users;

  public DefaultAnswerService(@Autowired SolutionService solutionService) {
    this.solutionService = solutionService;
  }

  public boolean isValidWord(String word,Game game) {

    word = word.toUpperCase();

    GameSeed gameSeed = new GameSeed(game);
    try {
      boolean result = solutionService.solve(gameSeed).containsKey(word);
      LOG.info("word : " + word + ( result ? " was found found " : " wasn't found ") ) ;
      return result;
    } catch (SolutionServiceException sse) {
      LOG.error("Caught exception trying to get board solution");
      LOG.error(sse.getMessage());
      return false;
    }

  }

  //Score without considering other users
  private int nominalScore(BoardWord boardWord,Game game) {
    return 0;
  }

  public Set<UserGameBoardWord> getUserGameBoardWords(Game game, User user) throws AnswerServiceException {

    Set<GameBoardWord> gameBoardWords = getGameBoardWords(game);
    gameBoardWords.forEach( gameBoardWord -> {
      int userPoints = 0;
      new UserGameBoardWord(gameBoardWord,userPoints);
    });
    return null;

  }

  public List<ScoreBoardEntry> getScoreBoard(Game game) {
    List<ScoreBoardEntry> scoreBoard = new ArrayList<ScoreBoardEntry>();
    game.users.forEach( userRef -> {
      scoreBoard.add( getUserGameBoardWords(game,
    });
    return null;
  }

  private Set<GameBoardWord> getGameBoardWords(Game game) throws AnswerServiceException {

    try {

      Set<GameBoardWord> gameBoardWords = new HashSet<GameBoardWord>();

      Map<String,BoardWord> solution = solutionService.solve(new GameSeed(game));

      for ( BoardWord boardWord : solution.values() ) {

        int potentialPoints = nominalScore(boardWord,game);

        GameAnswer firstAnswer = null;
        int cofinders = 0;
        for ( GameAnswer gameAnswer : game.answers ) {
          if ( gameAnswer.answer.equalsIgnoreCase(boardWord.word) ) {

            cofinders++;
            if ( gameAnswer.answerSubmissionTime.isBefore(firstAnswer.answerSubmissionTime) ) {
              firstAnswer = gameAnswer;
            }

          }
        }
        Integer firstFinder = firstAnswer == null ?  null : firstAnswer.user.getId();

        gameBoardWords.add(new GameBoardWord(boardWord,firstFinder,potentialPoints,cofinders));

      }

      return gameBoardWords;

    } catch (SolutionServiceException e) {
      throw new AnswerServiceException(AnswerServiceError.ERROR);
    }
  }

}
